/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createPromotion } from '../fn/promotion-and-event/create-promotion';
import { CreatePromotion$Params } from '../fn/promotion-and-event/create-promotion';
import { deletePromotion } from '../fn/promotion-and-event/delete-promotion';
import { DeletePromotion$Params } from '../fn/promotion-and-event/delete-promotion';
import { EventPromotion } from '../models/event-promotion';
import { getAllPromotions } from '../fn/promotion-and-event/get-all-promotions';
import { GetAllPromotions$Params } from '../fn/promotion-and-event/get-all-promotions';
import { getPromotionById } from '../fn/promotion-and-event/get-promotion-by-id';
import { GetPromotionById$Params } from '../fn/promotion-and-event/get-promotion-by-id';
import { updatePromotion } from '../fn/promotion-and-event/update-promotion';
import { UpdatePromotion$Params } from '../fn/promotion-and-event/update-promotion';
import { uploadPostCoverPicture } from '../fn/promotion-and-event/upload-post-cover-picture';
import { UploadPostCoverPicture$Params } from '../fn/promotion-and-event/upload-post-cover-picture';

@Injectable({ providedIn: 'root' })
export class PromotionAndEventService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getPromotionById()` */
  static readonly GetPromotionByIdPath = '/pv/{pvId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPromotionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPromotionById$Response(params: GetPromotionById$Params, context?: HttpContext): Observable<StrictHttpResponse<EventPromotion>> {
    return getPromotionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPromotionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPromotionById(params: GetPromotionById$Params, context?: HttpContext): Observable<EventPromotion> {
    return this.getPromotionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<EventPromotion>): EventPromotion => r.body)
    );
  }

  /** Path part for operation `updatePromotion()` */
  static readonly UpdatePromotionPath = '/pv/{pvId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePromotion()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePromotion$Response(params: UpdatePromotion$Params, context?: HttpContext): Observable<StrictHttpResponse<EventPromotion>> {
    return updatePromotion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePromotion$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePromotion(params: UpdatePromotion$Params, context?: HttpContext): Observable<EventPromotion> {
    return this.updatePromotion$Response(params, context).pipe(
      map((r: StrictHttpResponse<EventPromotion>): EventPromotion => r.body)
    );
  }

  /** Path part for operation `deletePromotion()` */
  static readonly DeletePromotionPath = '/pv/{pvId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePromotion()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePromotion$Response(params: DeletePromotion$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePromotion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePromotion$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePromotion(params: DeletePromotion$Params, context?: HttpContext): Observable<void> {
    return this.deletePromotion$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllPromotions()` */
  static readonly GetAllPromotionsPath = '/pv';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPromotions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPromotions$Response(params?: GetAllPromotions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EventPromotion>>> {
    return getAllPromotions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPromotions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPromotions(params?: GetAllPromotions$Params, context?: HttpContext): Observable<Array<EventPromotion>> {
    return this.getAllPromotions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EventPromotion>>): Array<EventPromotion> => r.body)
    );
  }

  /** Path part for operation `createPromotion()` */
  static readonly CreatePromotionPath = '/pv';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPromotion()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPromotion$Response(params: CreatePromotion$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createPromotion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPromotion$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPromotion(params: CreatePromotion$Params, context?: HttpContext): Observable<number> {
    return this.createPromotion$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadPostCoverPicture()` */
  static readonly UploadPostCoverPicturePath = '/pv/picture/{pv-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPostCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPostCoverPicture$Response(params: UploadPostCoverPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPostCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPostCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPostCoverPicture(params: UploadPostCoverPicture$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPostCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}

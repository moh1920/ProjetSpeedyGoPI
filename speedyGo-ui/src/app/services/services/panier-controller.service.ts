/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPanierForCurrentUser } from '../fn/panier-controller/add-panier-for-current-user';
import { AddPanierForCurrentUser$Params } from '../fn/panier-controller/add-panier-for-current-user';
import { addProductToPanier } from '../fn/panier-controller/add-product-to-panier';
import { AddProductToPanier$Params } from '../fn/panier-controller/add-product-to-panier';
import { getPanierForCurrentUser } from '../fn/panier-controller/get-panier-for-current-user';
import { GetPanierForCurrentUser$Params } from '../fn/panier-controller/get-panier-for-current-user';
import { Panier } from '../models/panier';
import { removeProductFromPanier } from '../fn/panier-controller/remove-product-from-panier';
import { RemoveProductFromPanier$Params } from '../fn/panier-controller/remove-product-from-panier';

@Injectable({ providedIn: 'root' })
export class PanierControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addPanierForCurrentUser()` */
  static readonly AddPanierForCurrentUserPath = '/panier/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPanierForCurrentUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  addPanierForCurrentUser$Response(params?: AddPanierForCurrentUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Panier>> {
    return addPanierForCurrentUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPanierForCurrentUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addPanierForCurrentUser(params?: AddPanierForCurrentUser$Params, context?: HttpContext): Observable<Panier> {
    return this.addPanierForCurrentUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Panier>): Panier => r.body)
    );
  }

  /** Path part for operation `addProductToPanier()` */
  static readonly AddProductToPanierPath = '/panier/add-product/{productId}/{quantity}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProductToPanier()` instead.
   *
   * This method doesn't expect any request body.
   */
  addProductToPanier$Response(params: AddProductToPanier$Params, context?: HttpContext): Observable<StrictHttpResponse<Panier>> {
    return addProductToPanier(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProductToPanier$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addProductToPanier(params: AddProductToPanier$Params, context?: HttpContext): Observable<Panier> {
    return this.addProductToPanier$Response(params, context).pipe(
      map((r: StrictHttpResponse<Panier>): Panier => r.body)
    );
  }

  /** Path part for operation `getPanierForCurrentUser()` */
  static readonly GetPanierForCurrentUserPath = '/panier/current';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPanierForCurrentUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPanierForCurrentUser$Response(params?: GetPanierForCurrentUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Panier>> {
    return getPanierForCurrentUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPanierForCurrentUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPanierForCurrentUser(params?: GetPanierForCurrentUser$Params, context?: HttpContext): Observable<Panier> {
    return this.getPanierForCurrentUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Panier>): Panier => r.body)
    );
  }

  /** Path part for operation `removeProductFromPanier()` */
  static readonly RemoveProductFromPanierPath = '/panier/remove/{productId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeProductFromPanier()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeProductFromPanier$Response(params: RemoveProductFromPanier$Params, context?: HttpContext): Observable<StrictHttpResponse<Panier>> {
    return removeProductFromPanier(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeProductFromPanier$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeProductFromPanier(params: RemoveProductFromPanier$Params, context?: HttpContext): Observable<Panier> {
    return this.removeProductFromPanier$Response(params, context).pipe(
      map((r: StrictHttpResponse<Panier>): Panier => r.body)
    );
  }

}

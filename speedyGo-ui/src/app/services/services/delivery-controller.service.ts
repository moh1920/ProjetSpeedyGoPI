/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createDelivery } from '../fn/delivery-controller/create-delivery';
import { CreateDelivery$Params } from '../fn/delivery-controller/create-delivery';
import { deleteDelivery } from '../fn/delivery-controller/delete-delivery';
import { DeleteDelivery$Params } from '../fn/delivery-controller/delete-delivery';
import { Delivery } from '../models/delivery';
import { getAllDeliveries } from '../fn/delivery-controller/get-all-deliveries';
import { GetAllDeliveries$Params } from '../fn/delivery-controller/get-all-deliveries';
import { getDeliveryById } from '../fn/delivery-controller/get-delivery-by-id';
import { GetDeliveryById$Params } from '../fn/delivery-controller/get-delivery-by-id';
import { updateDelivery } from '../fn/delivery-controller/update-delivery';
import { UpdateDelivery$Params } from '../fn/delivery-controller/update-delivery';

@Injectable({ providedIn: 'root' })
export class DeliveryControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateDelivery()` */
  static readonly UpdateDeliveryPath = '/api/deliveries/updateDelivery/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDelivery()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDelivery$Response(params: UpdateDelivery$Params, context?: HttpContext): Observable<StrictHttpResponse<Delivery>> {
    return updateDelivery(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDelivery$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDelivery(params: UpdateDelivery$Params, context?: HttpContext): Observable<Delivery> {
    return this.updateDelivery$Response(params, context).pipe(
      map((r: StrictHttpResponse<Delivery>): Delivery => r.body)
    );
  }

  /** Path part for operation `createDelivery()` */
  static readonly CreateDeliveryPath = '/api/deliveries/createDelivery';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createDelivery()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDelivery$Response(params: CreateDelivery$Params, context?: HttpContext): Observable<StrictHttpResponse<Delivery>> {
    return createDelivery(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createDelivery$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDelivery(params: CreateDelivery$Params, context?: HttpContext): Observable<Delivery> {
    return this.createDelivery$Response(params, context).pipe(
      map((r: StrictHttpResponse<Delivery>): Delivery => r.body)
    );
  }

  /** Path part for operation `getDeliveryById()` */
  static readonly GetDeliveryByIdPath = '/api/deliveries/getDeliveryById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDeliveryById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDeliveryById$Response(params: GetDeliveryById$Params, context?: HttpContext): Observable<StrictHttpResponse<Delivery>> {
    return getDeliveryById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDeliveryById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDeliveryById(params: GetDeliveryById$Params, context?: HttpContext): Observable<Delivery> {
    return this.getDeliveryById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Delivery>): Delivery => r.body)
    );
  }

  /** Path part for operation `getAllDeliveries()` */
  static readonly GetAllDeliveriesPath = '/api/deliveries/getAllDeliveries';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDeliveries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDeliveries$Response(params?: GetAllDeliveries$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Delivery>>> {
    return getAllDeliveries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDeliveries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDeliveries(params?: GetAllDeliveries$Params, context?: HttpContext): Observable<Array<Delivery>> {
    return this.getAllDeliveries$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Delivery>>): Array<Delivery> => r.body)
    );
  }

  /** Path part for operation `deleteDelivery()` */
  static readonly DeleteDeliveryPath = '/api/deliveries/deleteDelivery/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDelivery()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDelivery$Response(params: DeleteDelivery$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteDelivery(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDelivery$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDelivery(params: DeleteDelivery$Params, context?: HttpContext): Observable<void> {
    return this.deleteDelivery$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

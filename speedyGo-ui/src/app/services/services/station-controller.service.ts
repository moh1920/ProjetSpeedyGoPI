/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addStation } from '../fn/station-controller/add-station';
import { AddStation$Params } from '../fn/station-controller/add-station';
import { deleteStation } from '../fn/station-controller/delete-station';
import { DeleteStation$Params } from '../fn/station-controller/delete-station';
import { getAllStation } from '../fn/station-controller/get-all-station';
import { GetAllStation$Params } from '../fn/station-controller/get-all-station';
import { getByIdStation } from '../fn/station-controller/get-by-id-station';
import { GetByIdStation$Params } from '../fn/station-controller/get-by-id-station';
import { updateStation } from '../fn/station-controller/update-station';
import { UpdateStation$Params } from '../fn/station-controller/update-station';

@Injectable({ providedIn: 'root' })
export class StationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateStation()` */
  static readonly UpdateStationPath = '/gestionStation/station/updateStation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStation$Response(params: UpdateStation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateStation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStation(params: UpdateStation$Params, context?: HttpContext): Observable<{
}> {
    return this.updateStation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addStation()` */
  static readonly AddStationPath = '/gestionStation/station/addStation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addStation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addStation$Response(params: AddStation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addStation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addStation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addStation(params: AddStation$Params, context?: HttpContext): Observable<{
}> {
    return this.addStation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getByIdStation()` */
  static readonly GetByIdStationPath = '/gestionStation/station/getByIdStation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByIdStation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdStation$Response(params: GetByIdStation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getByIdStation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByIdStation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdStation(params: GetByIdStation$Params, context?: HttpContext): Observable<{
}> {
    return this.getByIdStation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllStation()` */
  static readonly GetAllStationPath = '/gestionStation/station/getAllStation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllStation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStation$Response(params?: GetAllStation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllStation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllStation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStation(params?: GetAllStation$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllStation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteStation()` */
  static readonly DeleteStationPath = '/gestionStation/station/deleteStation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStation$Response(params: DeleteStation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteStation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStation(params: DeleteStation$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteStation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}

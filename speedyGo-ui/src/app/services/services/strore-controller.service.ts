/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createStore } from '../fn/strore-controller/create-store';
import { CreateStore$Params } from '../fn/strore-controller/create-store';
import { deleteStore } from '../fn/strore-controller/delete-store';
import { DeleteStore$Params } from '../fn/strore-controller/delete-store';
import { getStoreById } from '../fn/strore-controller/get-store-by-id';
import { GetStoreById$Params } from '../fn/strore-controller/get-store-by-id';
import { Store } from '../models/store';
import { updateStore } from '../fn/strore-controller/update-store';
import { UpdateStore$Params } from '../fn/strore-controller/update-store';

@Injectable({ providedIn: 'root' })
export class StroreControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getStoreById()` */
  static readonly GetStoreByIdPath = '/store/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStoreById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStoreById$Response(params: GetStoreById$Params, context?: HttpContext): Observable<StrictHttpResponse<Store>> {
    return getStoreById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStoreById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStoreById(params: GetStoreById$Params, context?: HttpContext): Observable<Store> {
    return this.getStoreById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Store>): Store => r.body)
    );
  }

  /** Path part for operation `updateStore()` */
  static readonly UpdateStorePath = '/store/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStore()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStore$Response(params: UpdateStore$Params, context?: HttpContext): Observable<StrictHttpResponse<Store>> {
    return updateStore(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStore$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStore(params: UpdateStore$Params, context?: HttpContext): Observable<Store> {
    return this.updateStore$Response(params, context).pipe(
      map((r: StrictHttpResponse<Store>): Store => r.body)
    );
  }

  /** Path part for operation `deleteStore()` */
  static readonly DeleteStorePath = '/store/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStore()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStore$Response(params: DeleteStore$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteStore(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStore$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStore(params: DeleteStore$Params, context?: HttpContext): Observable<void> {
    return this.deleteStore$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createStore()` */
  static readonly CreateStorePath = '/store';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createStore()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createStore$Response(params: CreateStore$Params, context?: HttpContext): Observable<StrictHttpResponse<Store>> {
    return createStore(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createStore$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createStore(params: CreateStore$Params, context?: HttpContext): Observable<Store> {
    return this.createStore$Response(params, context).pipe(
      map((r: StrictHttpResponse<Store>): Store => r.body)
    );
  }

}

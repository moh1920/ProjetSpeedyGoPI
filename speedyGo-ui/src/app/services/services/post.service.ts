/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext, HttpParams} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteComment } from '../fn/post/delete-comment';
import { DeleteComment$Params } from '../fn/post/delete-comment';
import { deletePostByOwner } from '../fn/post/delete-post-by-owner';
import { DeletePostByOwner$Params } from '../fn/post/delete-post-by-owner';
import { deleteReaction } from '../fn/post/delete-reaction';
import { DeleteReaction$Params } from '../fn/post/delete-reaction';
import { deleteReactionFromPost } from '../fn/post/delete-reaction-from-post';
import { DeleteReactionFromPost$Params } from '../fn/post/delete-reaction-from-post';
import { findAllCommentForPost } from '../fn/post/find-all-comment-for-post';
import { FindAllCommentForPost$Params } from '../fn/post/find-all-comment-for-post';
import { findAllPosts } from '../fn/post/find-all-posts';
import { FindAllPosts$Params } from '../fn/post/find-all-posts';
import { findAllPostsByOwner } from '../fn/post/find-all-posts-by-owner';
import { FindAllPostsByOwner$Params } from '../fn/post/find-all-posts-by-owner';
import { findAllReactionForPost } from '../fn/post/find-all-reaction-for-post';
import { FindAllReactionForPost$Params } from '../fn/post/find-all-reaction-for-post';
import { findPostById } from '../fn/post/find-post-by-id';
import { FindPostById$Params } from '../fn/post/find-post-by-id';
import { makeCommentToPost } from '../fn/post/make-comment-to-post';
import { MakeCommentToPost$Params } from '../fn/post/make-comment-to-post';
import { makeReactionForPost } from '../fn/post/make-reaction-for-post';
import { MakeReactionForPost$Params } from '../fn/post/make-reaction-for-post';
import { PageResponseComment } from '../models/page-response-comment';
import { PageResponsePostResponse } from '../models/page-response-post-response';
import { PageResponseReaction } from '../models/page-response-reaction';
import { PostResponse } from '../models/post-response';
import { savePost } from '../fn/post/save-post';
import { SavePost$Params } from '../fn/post/save-post';
import { updateCommentForPost } from '../fn/post/update-comment-for-post';
import { UpdateCommentForPost$Params } from '../fn/post/update-comment-for-post';
import { updatePost } from '../fn/post/update-post';
import { UpdatePost$Params } from '../fn/post/update-post';
import { uploadPostCoverPicture1 } from '../fn/post/upload-post-cover-picture-1';
import { UploadPostCoverPicture1$Params } from '../fn/post/upload-post-cover-picture-1';

@Injectable({ providedIn: 'root' })
export class PostService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  getImage(filename: string): Observable<Blob> {
    const cleanFilename = filename.replace(/^\.\/uploads\\/i, '');
    return this.http.get(`http://localhost:8020/posts/uploads/${cleanFilename}`, { responseType: 'blob' });
  }



  /** Path part for operation `updatePost()` */
  static readonly UpdatePostPath = '/posts/updatePost/{postId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePost$Response(params: UpdatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePost(params: UpdatePost$Params, context?: HttpContext): Observable<{
}> {
    return this.updatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateCommentForPost()` */
  static readonly UpdateCommentForPostPath = '/posts/updateCommentForPost/{commentId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCommentForPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCommentForPost$Response(params: UpdateCommentForPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateCommentForPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCommentForPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCommentForPost(params: UpdateCommentForPost$Params, context?: HttpContext): Observable<{
}> {
    return this.updateCommentForPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `savePost()` */
  static readonly SavePostPath = '/posts/savePost';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `savePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePost$Response(params: SavePost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return savePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `savePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePost(params: SavePost$Params, context?: HttpContext): Observable<number> {
    return this.savePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadPostCoverPicture1()` */
  static readonly UploadPostCoverPicture1Path = '/posts/picture/{post-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPostCoverPicture1()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPostCoverPicture1$Response(params: UploadPostCoverPicture1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPostCoverPicture1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPostCoverPicture1$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPostCoverPicture(params: UploadPostCoverPicture1$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPostCoverPicture1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `makeReactionForPost()` */
  static readonly MakeReactionForPostPath = '/posts/makeReactionForPost/{postId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `makeReactionForPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeReactionForPost$Response(params: MakeReactionForPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return makeReactionForPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `makeReactionForPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeReactionForPost(params: MakeReactionForPost$Params, context?: HttpContext): Observable<void> {
    return this.makeReactionForPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `makeCommentToPost()` */
  static readonly MakeCommentToPostPath = '/posts/add/comment/{postId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `makeCommentToPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeCommentToPost$Response(params: MakeCommentToPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return makeCommentToPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `makeCommentToPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeCommentToPost(params: MakeCommentToPost$Params, context?: HttpContext): Observable<{
}> {
    return this.makeCommentToPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findAllPosts()` */
  static readonly FindAllPostsPath = '/posts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllPosts()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPosts$Response(params?: FindAllPosts$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePostResponse>> {
    return findAllPosts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllPosts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPosts(params?: FindAllPosts$Params, context?: HttpContext): Observable<PageResponsePostResponse> {
    return this.findAllPosts$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePostResponse>): PageResponsePostResponse => r.body)
    );
  }

  /** Path part for operation `findPostById()` */
  static readonly FindPostByIdPath = '/posts/{post-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findPostById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPostById$Response(params: FindPostById$Params, context?: HttpContext): Observable<StrictHttpResponse<PostResponse>> {
    return findPostById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findPostById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPostById(params: FindPostById$Params, context?: HttpContext): Observable<PostResponse> {
    return this.findPostById$Response(params, context).pipe(
      map((r: StrictHttpResponse<PostResponse>): PostResponse => r.body)
    );
  }

  /** Path part for operation `findAllPostsByOwner()` */
  static readonly FindAllPostsByOwnerPath = '/posts/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllPostsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPostsByOwner$Response(params?: FindAllPostsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePostResponse>> {
    return findAllPostsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllPostsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
 /* findAllPostsByOwner(params?: FindAllPostsByOwner$Params, context?: HttpContext): Observable<PageResponsePostResponse> {
    return this.findAllPostsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePostResponse>): PageResponsePostResponse => r.body)
    );
  }*/
  findAllPostsByOwner(page: number, size: number): Observable<PageResponsePostResponse> {
    const params = new HttpParams().set('page', page).set('size', size);

    return this.http.get<PageResponsePostResponse>(`http://localhost:8020/posts/owner`, { params });
  }
  /** Path part for operation `findAllCommentForPost()` */
  static readonly FindAllCommentForPostPath = '/posts/getCommentsByPost/{postId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCommentForPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCommentForPost$Response(params: FindAllCommentForPost$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseComment>> {
    return findAllCommentForPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCommentForPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCommentForPost(params: FindAllCommentForPost$Params, context?: HttpContext): Observable<PageResponseComment> {
    return this.findAllCommentForPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseComment>): PageResponseComment => r.body)
    );
  }

  /** Path part for operation `findAllReactionForPost()` */
  static readonly FindAllReactionForPostPath = '/posts/findAllReactionForPost/{postId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReactionForPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReactionForPost$Response(params: FindAllReactionForPost$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseReaction>> {
    return findAllReactionForPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReactionForPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReactionForPost(params: FindAllReactionForPost$Params, context?: HttpContext): Observable<PageResponseReaction> {
    return this.findAllReactionForPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseReaction>): PageResponseReaction => r.body)
    );
  }

  /** Path part for operation `deleteComment()` */
  static readonly DeleteCommentPath = '/posts/removeComment/{commentId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteComment()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment$Response(params: DeleteComment$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteComment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment(params: DeleteComment$Params, context?: HttpContext): Observable<void> {
    return this.deleteComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteReaction()` */
  static readonly DeleteReactionPath = '/posts/posts/{postId}/reactions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteReaction()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReaction$Response(params: DeleteReaction$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteReaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteReaction$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReaction(params: DeleteReaction$Params, context?: HttpContext): Observable<void> {
    return this.deleteReaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteReactionFromPost()` */
  static readonly DeleteReactionFromPostPath = '/posts/deleteReactionFromPost/{reactionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteReactionFromPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReactionFromPost$Response(params: DeleteReactionFromPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteReactionFromPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteReactionFromPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReactionFromPost(params: DeleteReactionFromPost$Params, context?: HttpContext): Observable<void> {
    return this.deleteReactionFromPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deletePostByOwner()` */
  static readonly DeletePostByOwnerPath = '/posts/deletePostByOwner/{postId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePostByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePostByOwner$Response(params: DeletePostByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePostByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePostByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePostByOwner(params: DeletePostByOwner$Params, context?: HttpContext): Observable<void> {
    return this.deletePostByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

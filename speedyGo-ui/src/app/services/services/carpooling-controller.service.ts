/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCarpool } from '../fn/carpooling-controller/add-carpool';
import { AddCarpool$Params } from '../fn/carpooling-controller/add-carpool';
import { Carpooling } from '../models/carpooling';
import { deleteCarpoolById } from '../fn/carpooling-controller/delete-carpool-by-id';
import { DeleteCarpoolById$Params } from '../fn/carpooling-controller/delete-carpool-by-id';
import { getAllCarpools } from '../fn/carpooling-controller/get-all-carpools';
import { GetAllCarpools$Params } from '../fn/carpooling-controller/get-all-carpools';
import { getCarpoolById } from '../fn/carpooling-controller/get-carpool-by-id';
import { GetCarpoolById$Params } from '../fn/carpooling-controller/get-carpool-by-id';
import { updateCarpool } from '../fn/carpooling-controller/update-carpool';
import { UpdateCarpool$Params } from '../fn/carpooling-controller/update-carpool';

@Injectable({ providedIn: 'root' })
export class CarpoolingControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCarpoolById()` */
  static readonly GetCarpoolByIdPath = '/carpooling/{id}';

  /**
   * Find carpool by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCarpoolById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCarpoolById$Response(params: GetCarpoolById$Params, context?: HttpContext): Observable<StrictHttpResponse<Carpooling>> {
    return getCarpoolById(this.http, this.rootUrl, params, context);
  }

  /**
   * Find carpool by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCarpoolById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCarpoolById(params: GetCarpoolById$Params, context?: HttpContext): Observable<Carpooling> {
    return this.getCarpoolById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Carpooling>): Carpooling => r.body)
    );
  }

  /** Path part for operation `updateCarpool()` */
  static readonly UpdateCarpoolPath = '/carpooling/{id}';

  /**
   * update a post carpool by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCarpool()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCarpool$Response(params: UpdateCarpool$Params, context?: HttpContext): Observable<StrictHttpResponse<Carpooling>> {
    return updateCarpool(this.http, this.rootUrl, params, context);
  }

  /**
   * update a post carpool by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCarpool$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCarpool(params: UpdateCarpool$Params, context?: HttpContext): Observable<Carpooling> {
    return this.updateCarpool$Response(params, context).pipe(
      map((r: StrictHttpResponse<Carpooling>): Carpooling => r.body)
    );
  }

  /** Path part for operation `deleteCarpoolById()` */
  static readonly DeleteCarpoolByIdPath = '/carpooling/{id}';

  /**
   * Delete a post carpool by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCarpoolById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCarpoolById$Response(params: DeleteCarpoolById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCarpoolById(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a post carpool by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCarpoolById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCarpoolById(params: DeleteCarpoolById$Params, context?: HttpContext): Observable<void> {
    return this.deleteCarpoolById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addCarpool()` */
  static readonly AddCarpoolPath = '/carpooling/add';

  /**
   * Add a new carpooling post.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCarpool()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCarpool$Response(params: AddCarpool$Params, context?: HttpContext): Observable<StrictHttpResponse<Carpooling>> {
    return addCarpool(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new carpooling post.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCarpool$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCarpool(params: AddCarpool$Params, context?: HttpContext): Observable<Carpooling> {
    return this.addCarpool$Response(params, context).pipe(
      map((r: StrictHttpResponse<Carpooling>): Carpooling => r.body)
    );
  }

  /** Path part for operation `getAllCarpools()` */
  static readonly GetAllCarpoolsPath = '/carpooling/all';

  /**
   * All the carpooling post.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCarpools()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCarpools$Response(params?: GetAllCarpools$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Carpooling>>> {
    return getAllCarpools(this.http, this.rootUrl, params, context);
  }

  /**
   * All the carpooling post.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCarpools$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCarpools(params?: GetAllCarpools$Params, context?: HttpContext): Observable<Array<Carpooling>> {
    return this.getAllCarpools$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Carpooling>>): Array<Carpooling> => r.body)
    );
  }

}

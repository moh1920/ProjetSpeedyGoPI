/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createSubscription } from '../fn/subscription-controller/create-subscription';
import { CreateSubscription$Params } from '../fn/subscription-controller/create-subscription';
import { deleteSubscription } from '../fn/subscription-controller/delete-subscription';
import { DeleteSubscription$Params } from '../fn/subscription-controller/delete-subscription';
import { getAllSubscriptions } from '../fn/subscription-controller/get-all-subscriptions';
import { GetAllSubscriptions$Params } from '../fn/subscription-controller/get-all-subscriptions';
import { getSubscriptionById } from '../fn/subscription-controller/get-subscription-by-id';
import { GetSubscriptionById$Params } from '../fn/subscription-controller/get-subscription-by-id';
import { getSubscriptionsByUser } from '../fn/subscription-controller/get-subscriptions-by-user';
import { GetSubscriptionsByUser$Params } from '../fn/subscription-controller/get-subscriptions-by-user';
import { Subscription } from '../models/subscription';
import { SubscriptionDto } from '../models/subscription-dto';
import { updateSubscription } from '../fn/subscription-controller/update-subscription';
import { UpdateSubscription$Params } from '../fn/subscription-controller/update-subscription';

@Injectable({ providedIn: 'root' })
export class SubscriptionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSubscription()` */
  static readonly UpdateSubscriptionPath = '/api/subscriptions/updateSubscription/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSubscription()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSubscription$Response(params: UpdateSubscription$Params, context?: HttpContext): Observable<StrictHttpResponse<Subscription>> {
    return updateSubscription(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSubscription$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSubscription(params: UpdateSubscription$Params, context?: HttpContext): Observable<Subscription> {
    return this.updateSubscription$Response(params, context).pipe(
      map((r: StrictHttpResponse<Subscription>): Subscription => r.body)
    );
  }

  /** Path part for operation `createSubscription()` */
  static readonly CreateSubscriptionPath = '/api/subscriptions/createSubscription';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSubscription()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSubscription$Response(params: CreateSubscription$Params, context?: HttpContext): Observable<StrictHttpResponse<Subscription>> {
    return createSubscription(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSubscription$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSubscription(params: CreateSubscription$Params, context?: HttpContext): Observable<Subscription> {
    return this.createSubscription$Response(params, context).pipe(
      map((r: StrictHttpResponse<Subscription>): Subscription => r.body)
    );
  }

  /** Path part for operation `getSubscriptionsByUser()` */
  static readonly GetSubscriptionsByUserPath = '/api/subscriptions/getSubscriptionsByUser/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSubscriptionsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubscriptionsByUser$Response(params: GetSubscriptionsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Subscription>>> {
    return getSubscriptionsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSubscriptionsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubscriptionsByUser(params: GetSubscriptionsByUser$Params, context?: HttpContext): Observable<Array<Subscription>> {
    return this.getSubscriptionsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Subscription>>): Array<Subscription> => r.body)
    );
  }

  /** Path part for operation `getSubscriptionById()` */
  static readonly GetSubscriptionByIdPath = '/api/subscriptions/getSubscriptionById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSubscriptionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubscriptionById$Response(params: GetSubscriptionById$Params, context?: HttpContext): Observable<StrictHttpResponse<Subscription>> {
    return getSubscriptionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSubscriptionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSubscriptionById(params: GetSubscriptionById$Params, context?: HttpContext): Observable<Subscription> {
    return this.getSubscriptionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Subscription>): Subscription => r.body)
    );
  }

  /** Path part for operation `getAllSubscriptions()` */
  static readonly GetAllSubscriptionsPath = '/api/subscriptions/getAllSubscriptions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSubscriptions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSubscriptions$Response(params?: GetAllSubscriptions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SubscriptionDto>>> {
    return getAllSubscriptions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSubscriptions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSubscriptions(params?: GetAllSubscriptions$Params, context?: HttpContext): Observable<Array<SubscriptionDto>> {
    return this.getAllSubscriptions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SubscriptionDto>>): Array<SubscriptionDto> => r.body)
    );
  }

  /** Path part for operation `deleteSubscription()` */
  static readonly DeleteSubscriptionPath = '/api/subscriptions/deleteSubscription/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSubscription()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSubscription$Response(params: DeleteSubscription$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSubscription(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSubscription$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSubscription(params: DeleteSubscription$Params, context?: HttpContext): Observable<void> {
    return this.deleteSubscription$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addTaxi } from '../fn/taxi-controller/add-taxi';
import { AddTaxi$Params } from '../fn/taxi-controller/add-taxi';
import { deleteTaxiById } from '../fn/taxi-controller/delete-taxi-by-id';
import { DeleteTaxiById$Params } from '../fn/taxi-controller/delete-taxi-by-id';
import { getAllTaxis } from '../fn/taxi-controller/get-all-taxis';
import { GetAllTaxis$Params } from '../fn/taxi-controller/get-all-taxis';
import { getTaxiById } from '../fn/taxi-controller/get-taxi-by-id';
import { GetTaxiById$Params } from '../fn/taxi-controller/get-taxi-by-id';
import { Taxi } from '../models/taxi';
import { updateTaxi } from '../fn/taxi-controller/update-taxi';
import { UpdateTaxi$Params } from '../fn/taxi-controller/update-taxi';

@Injectable({ providedIn: 'root' })
export class TaxiControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTaxiById()` */
  static readonly GetTaxiByIdPath = '/taxi/{id}';

  /**
   * Find taxi by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaxiById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaxiById$Response(params: GetTaxiById$Params, context?: HttpContext): Observable<StrictHttpResponse<Taxi>> {
    return getTaxiById(this.http, this.rootUrl, params, context);
  }

  /**
   * Find taxi by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaxiById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaxiById(params: GetTaxiById$Params, context?: HttpContext): Observable<Taxi> {
    return this.getTaxiById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Taxi>): Taxi => r.body)
    );
  }

  /** Path part for operation `updateTaxi()` */
  static readonly UpdateTaxiPath = '/taxi/{id}';

  /**
   * update a taxi by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaxi()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaxi$Response(params: UpdateTaxi$Params, context?: HttpContext): Observable<StrictHttpResponse<Taxi>> {
    return updateTaxi(this.http, this.rootUrl, params, context);
  }

  /**
   * update a taxi by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaxi$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaxi(params: UpdateTaxi$Params, context?: HttpContext): Observable<Taxi> {
    return this.updateTaxi$Response(params, context).pipe(
      map((r: StrictHttpResponse<Taxi>): Taxi => r.body)
    );
  }

  /** Path part for operation `deleteTaxiById()` */
  static readonly DeleteTaxiByIdPath = '/taxi/{id}';

  /**
   * Delete a taxi by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTaxiById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaxiById$Response(params: DeleteTaxiById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTaxiById(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a taxi by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTaxiById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaxiById(params: DeleteTaxiById$Params, context?: HttpContext): Observable<void> {
    return this.deleteTaxiById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addTaxi()` */
  static readonly AddTaxiPath = '/taxi/add';

  /**
   * Add a new Taxi.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTaxi()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTaxi$Response(params: AddTaxi$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addTaxi(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new Taxi.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTaxi$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTaxi(params: AddTaxi$Params, context?: HttpContext): Observable<{
}> {
    return this.addTaxi$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllTaxis()` */
  static readonly GetAllTaxisPath = '/taxi/all';

  /**
   * All the Taxis.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTaxis()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTaxis$Response(params?: GetAllTaxis$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Taxi>>> {
    return getAllTaxis(this.http, this.rootUrl, params, context);
  }

  /**
   * All the Taxis.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTaxis$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTaxis(params?: GetAllTaxis$Params, context?: HttpContext): Observable<Array<Taxi>> {
    return this.getAllTaxis$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Taxi>>): Array<Taxi> => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addMaintenanceHistory } from '../fn/maintenance-history-controller/add-maintenance-history';
import { AddMaintenanceHistory$Params } from '../fn/maintenance-history-controller/add-maintenance-history';
import { deleteMaintenanceHistory } from '../fn/maintenance-history-controller/delete-maintenance-history';
import { DeleteMaintenanceHistory$Params } from '../fn/maintenance-history-controller/delete-maintenance-history';
import { getAllMaintenanceHistory } from '../fn/maintenance-history-controller/get-all-maintenance-history';
import { GetAllMaintenanceHistory$Params } from '../fn/maintenance-history-controller/get-all-maintenance-history';
import { getByIdMaintenanceHistory } from '../fn/maintenance-history-controller/get-by-id-maintenance-history';
import { GetByIdMaintenanceHistory$Params } from '../fn/maintenance-history-controller/get-by-id-maintenance-history';
import { updateMaintenanceHistory } from '../fn/maintenance-history-controller/update-maintenance-history';
import { UpdateMaintenanceHistory$Params } from '../fn/maintenance-history-controller/update-maintenance-history';

@Injectable({ providedIn: 'root' })
export class MaintenanceHistoryControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateMaintenanceHistory()` */
  static readonly UpdateMaintenanceHistoryPath = '/gestionStation/maintenanceHistory/updateMaintenanceHistory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMaintenanceHistory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMaintenanceHistory$Response(params: UpdateMaintenanceHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateMaintenanceHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMaintenanceHistory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMaintenanceHistory(params: UpdateMaintenanceHistory$Params, context?: HttpContext): Observable<{
}> {
    return this.updateMaintenanceHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addMaintenanceHistory()` */
  static readonly AddMaintenanceHistoryPath = '/gestionStation/maintenanceHistory/addMaintenanceHistory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMaintenanceHistory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMaintenanceHistory$Response(params: AddMaintenanceHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addMaintenanceHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addMaintenanceHistory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMaintenanceHistory(params: AddMaintenanceHistory$Params, context?: HttpContext): Observable<{
}> {
    return this.addMaintenanceHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getByIdMaintenanceHistory()` */
  static readonly GetByIdMaintenanceHistoryPath = '/gestionStation/maintenanceHistory/getByIdMaintenanceHistory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByIdMaintenanceHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdMaintenanceHistory$Response(params: GetByIdMaintenanceHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getByIdMaintenanceHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByIdMaintenanceHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdMaintenanceHistory(params: GetByIdMaintenanceHistory$Params, context?: HttpContext): Observable<{
}> {
    return this.getByIdMaintenanceHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllMaintenanceHistory()` */
  static readonly GetAllMaintenanceHistoryPath = '/gestionStation/maintenanceHistory/getAllMaintenanceHistory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMaintenanceHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMaintenanceHistory$Response(params?: GetAllMaintenanceHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllMaintenanceHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMaintenanceHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMaintenanceHistory(params?: GetAllMaintenanceHistory$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllMaintenanceHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteMaintenanceHistory()` */
  static readonly DeleteMaintenanceHistoryPath = '/gestionStation/maintenanceHistory/deleteMaintenanceHistory';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMaintenanceHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMaintenanceHistory$Response(params: DeleteMaintenanceHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteMaintenanceHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMaintenanceHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMaintenanceHistory(params: DeleteMaintenanceHistory$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteMaintenanceHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}

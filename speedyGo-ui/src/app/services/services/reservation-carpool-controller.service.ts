/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { acceptReservation } from '../fn/reservation-carpool-controller/accept-reservation';
import { AcceptReservation$Params } from '../fn/reservation-carpool-controller/accept-reservation';
import { addReservationCarpool } from '../fn/reservation-carpool-controller/add-reservation-carpool';
import { AddReservationCarpool$Params } from '../fn/reservation-carpool-controller/add-reservation-carpool';
import { deleteReservationCarpoolById } from '../fn/reservation-carpool-controller/delete-reservation-carpool-by-id';
import { DeleteReservationCarpoolById$Params } from '../fn/reservation-carpool-controller/delete-reservation-carpool-by-id';
import { findByRequestedPrice } from '../fn/reservation-carpool-controller/find-by-requested-price';
import { FindByRequestedPrice$Params } from '../fn/reservation-carpool-controller/find-by-requested-price';
import { getAllReservationsCarpool } from '../fn/reservation-carpool-controller/get-all-reservations-carpool';
import { GetAllReservationsCarpool$Params } from '../fn/reservation-carpool-controller/get-all-reservations-carpool';
import { getReservationCarpoolById } from '../fn/reservation-carpool-controller/get-reservation-carpool-by-id';
import { GetReservationCarpoolById$Params } from '../fn/reservation-carpool-controller/get-reservation-carpool-by-id';
import { ReservationCarpool } from '../models/reservation-carpool';
import { updateReservationCarpool } from '../fn/reservation-carpool-controller/update-reservation-carpool';
import { UpdateReservationCarpool$Params } from '../fn/reservation-carpool-controller/update-reservation-carpool';

@Injectable({ providedIn: 'root' })
export class ReservationCarpoolControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getReservationCarpoolById()` */
  static readonly GetReservationCarpoolByIdPath = '/reservationCarpool/{id}';

  /**
   * Find carpool reservation by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReservationCarpoolById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReservationCarpoolById$Response(params: GetReservationCarpoolById$Params, context?: HttpContext): Observable<StrictHttpResponse<ReservationCarpool>> {
    return getReservationCarpoolById(this.http, this.rootUrl, params, context);
  }

  /**
   * Find carpool reservation by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReservationCarpoolById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReservationCarpoolById(params: GetReservationCarpoolById$Params, context?: HttpContext): Observable<ReservationCarpool> {
    return this.getReservationCarpoolById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReservationCarpool>): ReservationCarpool => r.body)
    );
  }

  /** Path part for operation `updateReservationCarpool()` */
  static readonly UpdateReservationCarpoolPath = '/reservationCarpool/{id}';

  /**
   * Update carpool reservation by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateReservationCarpool()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateReservationCarpool$Response(params: UpdateReservationCarpool$Params, context?: HttpContext): Observable<StrictHttpResponse<ReservationCarpool>> {
    return updateReservationCarpool(this.http, this.rootUrl, params, context);
  }

  /**
   * Update carpool reservation by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateReservationCarpool$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateReservationCarpool(params: UpdateReservationCarpool$Params, context?: HttpContext): Observable<ReservationCarpool> {
    return this.updateReservationCarpool$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReservationCarpool>): ReservationCarpool => r.body)
    );
  }

  /** Path part for operation `deleteReservationCarpoolById()` */
  static readonly DeleteReservationCarpoolByIdPath = '/reservationCarpool/{id}';

  /**
   * Delete a carpool reservation by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteReservationCarpoolById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReservationCarpoolById$Response(params: DeleteReservationCarpoolById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteReservationCarpoolById(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a carpool reservation by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteReservationCarpoolById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReservationCarpoolById(params: DeleteReservationCarpoolById$Params, context?: HttpContext): Observable<void> {
    return this.deleteReservationCarpoolById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `acceptReservation()` */
  static readonly AcceptReservationPath = '/reservationCarpool/accept/{id}';

  /**
   * Accept a reservation for carpooling.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `acceptReservation()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptReservation$Response(params: AcceptReservation$Params, context?: HttpContext): Observable<StrictHttpResponse<ReservationCarpool>> {
    return acceptReservation(this.http, this.rootUrl, params, context);
  }

  /**
   * Accept a reservation for carpooling.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `acceptReservation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptReservation(params: AcceptReservation$Params, context?: HttpContext): Observable<ReservationCarpool> {
    return this.acceptReservation$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReservationCarpool>): ReservationCarpool => r.body)
    );
  }

  /** Path part for operation `addReservationCarpool()` */
  static readonly AddReservationCarpoolPath = '/reservationCarpool/add';

  /**
   * Add a new reservation for carpooling.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addReservationCarpool()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addReservationCarpool$Response(params: AddReservationCarpool$Params, context?: HttpContext): Observable<StrictHttpResponse<ReservationCarpool>> {
    return addReservationCarpool(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new reservation for carpooling.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addReservationCarpool$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addReservationCarpool(params: AddReservationCarpool$Params, context?: HttpContext): Observable<ReservationCarpool> {
    return this.addReservationCarpool$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReservationCarpool>): ReservationCarpool => r.body)
    );
  }

  /** Path part for operation `findByRequestedPrice()` */
  static readonly FindByRequestedPricePath = '/reservationCarpool/searchByPrice/{requestedPrice}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByRequestedPrice()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByRequestedPrice$Response(params: FindByRequestedPrice$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReservationCarpool>>> {
    return findByRequestedPrice(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByRequestedPrice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByRequestedPrice(params: FindByRequestedPrice$Params, context?: HttpContext): Observable<Array<ReservationCarpool>> {
    return this.findByRequestedPrice$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReservationCarpool>>): Array<ReservationCarpool> => r.body)
    );
  }

  /** Path part for operation `getAllReservationsCarpool()` */
  static readonly GetAllReservationsCarpoolPath = '/reservationCarpool/all';

  /**
   * Get all carpool reservations.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllReservationsCarpool()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReservationsCarpool$Response(params?: GetAllReservationsCarpool$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReservationCarpool>>> {
    return getAllReservationsCarpool(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all carpool reservations.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllReservationsCarpool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReservationsCarpool(params?: GetAllReservationsCarpool$Params, context?: HttpContext): Observable<Array<ReservationCarpool>> {
    return this.getAllReservationsCarpool$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReservationCarpool>>): Array<ReservationCarpool> => r.body)
    );
  }

}

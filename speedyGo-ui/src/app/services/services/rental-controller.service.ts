/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRental } from '../fn/rental-controller/add-rental';
import { AddRental$Params } from '../fn/rental-controller/add-rental';
import { affecterRentalToCustomer } from '../fn/rental-controller/affecter-rental-to-customer';
import { AffecterRentalToCustomer$Params } from '../fn/rental-controller/affecter-rental-to-customer';
import { affecterStationDestinationRental } from '../fn/rental-controller/affecter-station-destination-rental';
import { AffecterStationDestinationRental$Params } from '../fn/rental-controller/affecter-station-destination-rental';
import { affecterStationStartRental } from '../fn/rental-controller/affecter-station-start-rental';
import { AffecterStationStartRental$Params } from '../fn/rental-controller/affecter-station-start-rental';
import { affecterVehicleRentalToRental } from '../fn/rental-controller/affecter-vehicle-rental-to-rental';
import { AffecterVehicleRentalToRental$Params } from '../fn/rental-controller/affecter-vehicle-rental-to-rental';
import { deleteRental } from '../fn/rental-controller/delete-rental';
import { DeleteRental$Params } from '../fn/rental-controller/delete-rental';
import { getAllRental } from '../fn/rental-controller/get-all-rental';
import { GetAllRental$Params } from '../fn/rental-controller/get-all-rental';
import { getByIdRental } from '../fn/rental-controller/get-by-id-rental';
import { GetByIdRental$Params } from '../fn/rental-controller/get-by-id-rental';
import { updateRental } from '../fn/rental-controller/update-rental';
import { UpdateRental$Params } from '../fn/rental-controller/update-rental';
import {CalculCostOfRental$Params, calculCostOfRental } from '../fn/rental-controller/calcul-cost-of-rental.service';
import {RentalDTO} from "../models/rental.dto";

@Injectable({ providedIn: 'root' })
export class RentalControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRental()` */
  static readonly UpdateRentalPath = '/gestionStation/rental/updateRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRental()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRental$Response(params: UpdateRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRental$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRental(params: UpdateRental$Params, context?: HttpContext): Observable<{
}> {
    return this.updateRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `affecterVehicleRentalToRental()` */
  static readonly AffecterVehicleRentalToRentalPath = '/gestionStation/rental/affecterVehicleRentalToRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `affecterVehicleRentalToRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  affecterVehicleRentalToRental$Response(params: AffecterVehicleRentalToRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return affecterVehicleRentalToRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `affecterVehicleRentalToRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  affecterVehicleRentalToRental(params: AffecterVehicleRentalToRental$Params, context?: HttpContext): Observable<{
}> {
    return this.affecterVehicleRentalToRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `affecterStationStartRental()` */
  static readonly AffecterStationStartRentalPath = '/gestionStation/rental/affecterStationStartRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `affecterStationStartRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  affecterStationStartRental$Response(params: AffecterStationStartRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return affecterStationStartRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `affecterStationStartRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  affecterStationStartRental(params: AffecterStationStartRental$Params, context?: HttpContext): Observable<{
}> {
    return this.affecterStationStartRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `affecterStationDestinationRental()` */
  static readonly AffecterStationDestinationRentalPath = '/gestionStation/rental/affecterStationDestinationRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `affecterStationDestinationRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  affecterStationDestinationRental$Response(params: AffecterStationDestinationRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return affecterStationDestinationRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `affecterStationDestinationRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  affecterStationDestinationRental(params: AffecterStationDestinationRental$Params, context?: HttpContext): Observable<{
}> {
    return this.affecterStationDestinationRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `affecterRentalToCustomer()` */
  static readonly AffecterRentalToCustomerPath = '/gestionStation/rental/affecterRentalToCustomer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `affecterRentalToCustomer()` instead.
   *
   * This method doesn't expect any request body.
   */
  affecterRentalToCustomer$Response(params: AffecterRentalToCustomer$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return affecterRentalToCustomer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `affecterRentalToCustomer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  affecterRentalToCustomer(params: AffecterRentalToCustomer$Params, context?: HttpContext): Observable<{
}> {
    return this.affecterRentalToCustomer$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addRental()` */
  static readonly AddRentalPath = '/gestionStation/rental/addRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRental()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRental$Response(params: AddRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRental$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRental(params: AddRental$Params, context?: HttpContext): Observable<{
}> {
    return this.addRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getByIdRental()` */
  static readonly GetByIdRentalPath = '/gestionStation/rental/getRentalById';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByIdRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdRental$Response(params: GetByIdRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getByIdRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByIdRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdRental(params: GetByIdRental$Params, context?: HttpContext): Observable<{
}> {
    return this.getByIdRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllRental()` */
  static readonly GetAllRentalPath = '/gestionStation/rental/getAllRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRental$Response(params?: GetAllRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRental(params?: GetAllRental$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteRental()` */
  static readonly DeleteRentalPath = '/gestionStation/rental/deleteRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRental$Response(params: DeleteRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRental(params: DeleteRental$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }






  private apiUrl = 'http://localhost:8020/gestionStation/rental/calculCostOfRental';

  calculCostOfRental(idRental: number): Observable<number> {
    // Assurez-vous que idRental est un nombre et l'envoyez comme paramètre d'URL
    return this.http.post<number>(`${this.apiUrl}?idRental=${idRental}`, {});
  }






  private baseUrl = 'http://localhost:8020/gestionStation/rental/getRentalById'; // adapte ce chemin si besoin


  getRentalByIds(id: number): Observable<RentalDTO> {
    return this.http.get<RentalDTO>(`${this.baseUrl}/${id}`);
  }



  private getRecommendedRoutePath = 'http://localhost:8020/gestionStation/rental/recommenderTrajet'; // adapte ce chemin si besoin

  // Méthode pour récupérer le trajet recommandé pour un ID de location
  getRecommendedRoute(idRental: number): Observable<string> {
    return this.http.get<string>(`${this.getRecommendedRoutePath}/${idRental}`,{
      responseType: 'text' as 'json'
    });
  }


  private getWeatherBetweenStationsPath = 'http://localhost:8020/gestionStation/rental/getWeatherBetweenStations';


  getWeatherBetweenStations(idRental: number): Observable<any> {
    return this.http.get(`${this.getWeatherBetweenStationsPath}/${idRental}`);
  }



  private getAllRentalsPath = 'http://localhost:8020/gestionStation/rental/getAllRental';

  getAllRentals(params: {
    page: number,
    size: number,
    sortBy: string,
    sortOrder: string
  }): Observable<any> {
    const queryParams = new HttpParams()
      .set('page', params.page)
      .set('size', params.size)
      .set('sortBy', params.sortBy)
      .set('sortOrder', params.sortOrder);

    return this.http.get(`${this.getAllRentalsPath}`, { params: queryParams });
  }


  private getAllRentalByVehiclePath = 'http://localhost:8020/gestionStation/rental/getAllRentalByVehicle'; // adapte l'URL selon ton backend


  getAllRentalByVehicle(idVehicle: number): Observable<RentalDTO[]> {
    return this.http.get<RentalDTO[]>(`${this.getAllRentalByVehiclePath}/${idVehicle}`);
  }


  private getAllRentalByCustomerPath = 'http://localhost:8020/gestionStation/rental/getAllRentalByCustomer'; // adapte l'URL selon ton backend



  getAllRentalByCustomer(): Observable<any> {
    return this.http.get(`${this.getAllRentalByCustomerPath}`);
  }

  private readonly runArchiveJobPAth = 'http://localhost:8020/gestionStation/maintenance/run-archive-job'; // ⚠️ adapte l'URL si nécessaire



  runArchiveJob(): Observable<string> {
    return this.http.get(this.runArchiveJobPAth, { responseType: 'text' });
  }

}

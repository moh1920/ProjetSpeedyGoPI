/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { affectationReservationTaxi } from '../fn/reservation-taxi-controller/affectation-reservation-taxi';
import { AffectationReservationTaxi$Params } from '../fn/reservation-taxi-controller/affectation-reservation-taxi';
import { createReservation } from '../fn/reservation-taxi-controller/create-reservation';
import { CreateReservation$Params } from '../fn/reservation-taxi-controller/create-reservation';
import { deleteReservation } from '../fn/reservation-taxi-controller/delete-reservation';
import { DeleteReservation$Params } from '../fn/reservation-taxi-controller/delete-reservation';
import { getAllReservations } from '../fn/reservation-taxi-controller/get-all-reservations';
import { GetAllReservations$Params } from '../fn/reservation-taxi-controller/get-all-reservations';
import { getReservationById } from '../fn/reservation-taxi-controller/get-reservation-by-id';
import { GetReservationById$Params } from '../fn/reservation-taxi-controller/get-reservation-by-id';
import { ReservationTaxi } from '../models/reservation-taxi';
import { updateReservation } from '../fn/reservation-taxi-controller/update-reservation';
import { UpdateReservation$Params } from '../fn/reservation-taxi-controller/update-reservation';

@Injectable({ providedIn: 'root' })
export class ReservationTaxiControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getReservationById()` */
  static readonly GetReservationByIdPath = '/reservationTaxi/{id}';

  /**
   * Get a reservation by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReservationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReservationById$Response(params: GetReservationById$Params, context?: HttpContext): Observable<StrictHttpResponse<ReservationTaxi>> {
    return getReservationById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a reservation by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReservationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReservationById(params: GetReservationById$Params, context?: HttpContext): Observable<ReservationTaxi> {
    return this.getReservationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReservationTaxi>): ReservationTaxi => r.body)
    );
  }

  /** Path part for operation `updateReservation()` */
  static readonly UpdateReservationPath = '/reservationTaxi/{id}';

  /**
   * Update an existing taxi reservation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateReservation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateReservation$Response(params: UpdateReservation$Params, context?: HttpContext): Observable<StrictHttpResponse<ReservationTaxi>> {
    return updateReservation(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing taxi reservation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateReservation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateReservation(params: UpdateReservation$Params, context?: HttpContext): Observable<ReservationTaxi> {
    return this.updateReservation$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReservationTaxi>): ReservationTaxi => r.body)
    );
  }

  /** Path part for operation `deleteReservation()` */
  static readonly DeleteReservationPath = '/reservationTaxi/{id}';

  /**
   * Delete a taxi reservation by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteReservation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReservation$Response(params: DeleteReservation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteReservation(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a taxi reservation by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteReservation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReservation(params: DeleteReservation$Params, context?: HttpContext): Observable<void> {
    return this.deleteReservation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createReservation()` */
  static readonly CreateReservationPath = '/reservationTaxi/create';

  /**
   * Create a new taxi reservation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createReservation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReservation$Response(params: CreateReservation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createReservation(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new taxi reservation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createReservation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReservation(params: CreateReservation$Params, context?: HttpContext): Observable<{
}> {
    return this.createReservation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `affectationReservationTaxi()` */
  static readonly AffectationReservationTaxiPath = '/reservationTaxi/affectationReservationTaxi';

  /**
   * Create a new taxi reservation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `affectationReservationTaxi()` instead.
   *
   * This method doesn't expect any request body.
   */
  affectationReservationTaxi$Response(params: AffectationReservationTaxi$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return affectationReservationTaxi(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new taxi reservation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `affectationReservationTaxi$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  affectationReservationTaxi(params: AffectationReservationTaxi$Params, context?: HttpContext): Observable<{
}> {
    return this.affectationReservationTaxi$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllReservations()` */
  static readonly GetAllReservationsPath = '/reservationTaxi/all';

  /**
   * Get all taxi reservations.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllReservations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReservations$Response(params?: GetAllReservations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReservationTaxi>>> {
    return getAllReservations(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all taxi reservations.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllReservations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReservations(params?: GetAllReservations$Params, context?: HttpContext): Observable<Array<ReservationTaxi>> {
    return this.getAllReservations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReservationTaxi>>): Array<ReservationTaxi> => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BookingSeats } from '../models/booking-seats';
import { createBooking } from '../fn/booking-seats-controller/create-booking';
import { CreateBooking$Params } from '../fn/booking-seats-controller/create-booking';
import { deleteBooking } from '../fn/booking-seats-controller/delete-booking';
import { DeleteBooking$Params } from '../fn/booking-seats-controller/delete-booking';
import { getAllBookings } from '../fn/booking-seats-controller/get-all-bookings';
import { GetAllBookings$Params } from '../fn/booking-seats-controller/get-all-bookings';
import { getBookingById } from '../fn/booking-seats-controller/get-booking-by-id';
import { GetBookingById$Params } from '../fn/booking-seats-controller/get-booking-by-id';
import { updateBooking } from '../fn/booking-seats-controller/update-booking';
import { UpdateBooking$Params } from '../fn/booking-seats-controller/update-booking';

@Injectable({ providedIn: 'root' })
export class BookingSeatsControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getBookingById()` */
  static readonly GetBookingByIdPath = '/bookingSeats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookingById$Response(params: GetBookingById$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingSeats>> {
    return getBookingById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookingById(params: GetBookingById$Params, context?: HttpContext): Observable<BookingSeats> {
    return this.getBookingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingSeats>): BookingSeats => r.body)
    );
  }

  /** Path part for operation `updateBooking()` */
  static readonly UpdateBookingPath = '/bookingSeats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateBooking$Response(params: UpdateBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingSeats>> {
    return updateBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateBooking(params: UpdateBooking$Params, context?: HttpContext): Observable<BookingSeats> {
    return this.updateBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingSeats>): BookingSeats => r.body)
    );
  }

  /** Path part for operation `deleteBooking()` */
  static readonly DeleteBookingPath = '/bookingSeats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBooking$Response(params: DeleteBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBooking(params: DeleteBooking$Params, context?: HttpContext): Observable<void> {
    return this.deleteBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createBooking()` */
  static readonly CreateBookingPath = '/bookingSeats/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  createBooking$Response(params: CreateBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingSeats>> {
    return createBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createBooking(params: CreateBooking$Params, context?: HttpContext): Observable<BookingSeats> {
    return this.createBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingSeats>): BookingSeats => r.body)
    );
  }

  /** Path part for operation `getAllBookings()` */
  static readonly GetAllBookingsPath = '/bookingSeats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBookings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBookings$Response(params?: GetAllBookings$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookingSeats>>> {
    return getAllBookings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBookings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBookings(params?: GetAllBookings$Params, context?: HttpContext): Observable<Array<BookingSeats>> {
    return this.getAllBookings$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookingSeats>>): Array<BookingSeats> => r.body)
    );
  }

}

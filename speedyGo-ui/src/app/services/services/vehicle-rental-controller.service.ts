/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext, HttpParams} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addVehicleRental } from '../fn/vehicle-rental-controller/add-vehicle-rental';
import { AddVehicleRental$Params } from '../fn/vehicle-rental-controller/add-vehicle-rental';
import { affectVehicleToStation } from '../fn/vehicle-rental-controller/affect-vehicle-to-station';
import { AffectVehicleToStation$Params } from '../fn/vehicle-rental-controller/affect-vehicle-to-station';
import { deleteVehicleRental } from '../fn/vehicle-rental-controller/delete-vehicle-rental';
import { DeleteVehicleRental$Params } from '../fn/vehicle-rental-controller/delete-vehicle-rental';
import { getAllVehicleRental } from '../fn/vehicle-rental-controller/get-all-vehicle-rental';
import { GetAllVehicleRental$Params } from '../fn/vehicle-rental-controller/get-all-vehicle-rental';
import { getByIdVehicleRental } from '../fn/vehicle-rental-controller/get-by-id-vehicle-rental';
import { GetByIdVehicleRental$Params } from '../fn/vehicle-rental-controller/get-by-id-vehicle-rental';
import { getVehiculeQrCode } from '../fn/vehicle-rental-controller/get-vehicule-qr-code';
import { GetVehiculeQrCode$Params } from '../fn/vehicle-rental-controller/get-vehicule-qr-code';
import { updateVehicleRental } from '../fn/vehicle-rental-controller/update-vehicle-rental';
import { UpdateVehicleRental$Params } from '../fn/vehicle-rental-controller/update-vehicle-rental';
import {PaginatedVehicleRentalResponse} from "../models/PaginatedVehicleRentalResponse";
import {VehicleRental} from "../models/vehicle-rental";

@Injectable({ providedIn: 'root' })
export class VehicleRentalControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateVehicleRental()` */
  static readonly UpdateVehicleRentalPath = '/gestionStation/vehicleRental/updateVehicleRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateVehicleRental()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateVehicleRental$Response(params: UpdateVehicleRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateVehicleRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateVehicleRental$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateVehicleRental(params: UpdateVehicleRental$Params, context?: HttpContext): Observable<{
}> {
    return this.updateVehicleRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `affectVehicleToStation()` */
  static readonly AffectVehicleToStationPath = '/gestionStation/vehicleRental/affectVehicleToStation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `affectVehicleToStation()` instead.
   *
   * This method doesn't expect any request body.
   */
  affectVehicleToStation$Response(params: AffectVehicleToStation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return affectVehicleToStation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `affectVehicleToStation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  affectVehicleToStation(params: AffectVehicleToStation$Params, context?: HttpContext): Observable<{
}> {
    return this.affectVehicleToStation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addVehicleRental()` */
  static readonly AddVehicleRentalPath = '/gestionStation/vehicleRental/addVehicleRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addVehicleRental()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addVehicleRental$Response(params: AddVehicleRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addVehicleRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addVehicleRental$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addVehicleRental(params: AddVehicleRental$Params, context?: HttpContext): Observable<{
}> {
    return this.addVehicleRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getVehiculeQrCode()` */
  static readonly GetVehiculeQrCodePath = '/gestionStation/vehicleRental/{id}/qrcode';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getVehiculeQrCode()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVehiculeQrCode$Response(params: GetVehiculeQrCode$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getVehiculeQrCode(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getVehiculeQrCode$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVehiculeQrCode(params: GetVehiculeQrCode$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getVehiculeQrCode$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getByIdVehicleRental()` */
  static readonly GetByIdVehicleRentalPath = '/gestionStation/vehicleRental/getByIdVehicleRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByIdVehicleRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdVehicleRental$Response(params: GetByIdVehicleRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getByIdVehicleRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByIdVehicleRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdVehicleRental(params: GetByIdVehicleRental$Params, context?: HttpContext): Observable<{
}> {
    return this.getByIdVehicleRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllVehicleRental()` */
  static readonly GetAllVehicleRentalPath = '/gestionStation/vehicleRental/getAllVehicleRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllVehicleRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllVehicleRental$Response(params?: GetAllVehicleRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllVehicleRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllVehicleRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllVehicleRental(params?: GetAllVehicleRental$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllVehicleRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteVehicleRental()` */
  static readonly DeleteVehicleRentalPath = '/gestionStation/vehicleRental/deleteVehicleRental';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteVehicleRental()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteVehicleRental$Response(params: DeleteVehicleRental$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteVehicleRental(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteVehicleRental$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteVehicleRental(params: DeleteVehicleRental$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteVehicleRental$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }


  getAllVehicleRentalSimple(params: GetAllVehicleRental$Params): Observable<PaginatedVehicleRentalResponse> {
    return getAllVehicleRental(this.http, this.rootUrl, params)
      .pipe(map(response => response.body!));
  }




  private addVehicleRentalWithImagePath = 'http://localhost:8020/gestionStation/vehicleRental/addVehicleRental';

  addVehicleRentalWithImage(vehicleRental: VehicleRental, file: File): Observable<any> {
    const formData = new FormData();

    formData.append('file', file);

    const vehicleRentalBlob = new Blob([JSON.stringify(vehicleRental)], {
      type: 'application/json'
    });
    formData.append('vehicleRental', vehicleRentalBlob);

    return this.http.post(`${this.addVehicleRentalWithImagePath}`, formData);
  }


  private apiUrl = 'http://localhost:8020/gestionStation/vehicleRental/getAllVehicleOnStation'; // adapte l’URL de base si besoin


  getAllVehicleOnStation(idStation: number): Observable<any> {
    const params = new HttpParams().set('idStation', idStation);
    return this.http.get(`${this.apiUrl}`, { params });
  }




}

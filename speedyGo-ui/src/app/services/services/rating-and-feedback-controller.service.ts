/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createRating } from '../fn/rating-and-feedback-controller/create-rating';
import { CreateRating$Params } from '../fn/rating-and-feedback-controller/create-rating';
import { deleteRating } from '../fn/rating-and-feedback-controller/delete-rating';
import { DeleteRating$Params } from '../fn/rating-and-feedback-controller/delete-rating';
import { getAllRatings } from '../fn/rating-and-feedback-controller/get-all-ratings';
import { GetAllRatings$Params } from '../fn/rating-and-feedback-controller/get-all-ratings';
import { getRatingById } from '../fn/rating-and-feedback-controller/get-rating-by-id';
import { GetRatingById$Params } from '../fn/rating-and-feedback-controller/get-rating-by-id';
import { RatingAndFeedback } from '../models/rating-and-feedback';
import { updateRating } from '../fn/rating-and-feedback-controller/update-rating';
import { UpdateRating$Params } from '../fn/rating-and-feedback-controller/update-rating';

@Injectable({ providedIn: 'root' })
export class RatingAndFeedbackControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRating()` */
  static readonly UpdateRatingPath = '/api/ratings/updateRating/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRating()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRating$Response(params: UpdateRating$Params, context?: HttpContext): Observable<StrictHttpResponse<RatingAndFeedback>> {
    return updateRating(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRating$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRating(params: UpdateRating$Params, context?: HttpContext): Observable<RatingAndFeedback> {
    return this.updateRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<RatingAndFeedback>): RatingAndFeedback => r.body)
    );
  }

  /** Path part for operation `createRating()` */
  static readonly CreateRatingPath = '/api/ratings/createRating';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRating()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRating$Response(params: CreateRating$Params, context?: HttpContext): Observable<StrictHttpResponse<RatingAndFeedback>> {
    return createRating(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRating$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRating(params: CreateRating$Params, context?: HttpContext): Observable<RatingAndFeedback> {
    return this.createRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<RatingAndFeedback>): RatingAndFeedback => r.body)
    );
  }

  /** Path part for operation `getRatingById()` */
  static readonly GetRatingByIdPath = '/api/ratings/getRatingById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRatingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRatingById$Response(params: GetRatingById$Params, context?: HttpContext): Observable<StrictHttpResponse<RatingAndFeedback>> {
    return getRatingById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRatingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRatingById(params: GetRatingById$Params, context?: HttpContext): Observable<RatingAndFeedback> {
    return this.getRatingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<RatingAndFeedback>): RatingAndFeedback => r.body)
    );
  }

  /** Path part for operation `getAllRatings()` */
  static readonly GetAllRatingsPath = '/api/ratings/getAllRatings';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRatings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRatings$Response(params?: GetAllRatings$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RatingAndFeedback>>> {
    return getAllRatings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRatings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRatings(params?: GetAllRatings$Params, context?: HttpContext): Observable<Array<RatingAndFeedback>> {
    return this.getAllRatings$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RatingAndFeedback>>): Array<RatingAndFeedback> => r.body)
    );
  }

  /** Path part for operation `deleteRating()` */
  static readonly DeleteRatingPath = '/api/ratings/deleteRating/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRating()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRating$Response(params: DeleteRating$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRating(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRating$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRating(params: DeleteRating$Params, context?: HttpContext): Observable<void> {
    return this.deleteRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

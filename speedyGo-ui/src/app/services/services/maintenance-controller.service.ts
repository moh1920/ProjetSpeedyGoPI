/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext, HttpParams} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addMaintenance } from '../fn/maintenance-controller/add-maintenance';
import { AddMaintenance$Params } from '../fn/maintenance-controller/add-maintenance';
import { affectMaintenanceToVehicle } from '../fn/maintenance-controller/affect-maintenance-to-vehicle';
import { AffectMaintenanceToVehicle$Params } from '../fn/maintenance-controller/affect-maintenance-to-vehicle';
import { deleteMaintenance } from '../fn/maintenance-controller/delete-maintenance';
import { DeleteMaintenance$Params } from '../fn/maintenance-controller/delete-maintenance';
import { getAllMaintenance } from '../fn/maintenance-controller/get-all-maintenance';
import { GetAllMaintenance$Params } from '../fn/maintenance-controller/get-all-maintenance';
import { getByIdMaintenance } from '../fn/maintenance-controller/get-by-id-maintenance';
import { GetByIdMaintenance$Params } from '../fn/maintenance-controller/get-by-id-maintenance';
import { updateMaintenance } from '../fn/maintenance-controller/update-maintenance';
import { UpdateMaintenance$Params } from '../fn/maintenance-controller/update-maintenance';
import {MaintenanceCountDTO} from "../models/MaintenanceCountDTO";

@Injectable({ providedIn: 'root' })
export class MaintenanceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateMaintenance()` */
  static readonly UpdateMaintenancePath = '/gestionStation/maintenance/updateMaintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMaintenance()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMaintenance$Response(params: UpdateMaintenance$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateMaintenance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMaintenance$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMaintenance(params: UpdateMaintenance$Params, context?: HttpContext): Observable<{
}> {
    return this.updateMaintenance$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `affectMaintenanceToVehicle()` */
  static readonly AffectMaintenanceToVehiclePath = '/gestionStation/maintenance/affectMaintenanceToVehicle';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `affectMaintenanceToVehicle()` instead.
   *
   * This method doesn't expect any request body.
   */
  affectMaintenanceToVehicle$Response(params: AffectMaintenanceToVehicle$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return affectMaintenanceToVehicle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `affectMaintenanceToVehicle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  affectMaintenanceToVehicle(params: AffectMaintenanceToVehicle$Params, context?: HttpContext): Observable<{
}> {
    return this.affectMaintenanceToVehicle$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addMaintenance()` */
  static readonly AddMaintenancePath = '/gestionStation/maintenance/addMaintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMaintenance()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMaintenance$Response(params: AddMaintenance$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addMaintenance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addMaintenance$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMaintenance(params: AddMaintenance$Params, context?: HttpContext): Observable<{
}> {
    return this.addMaintenance$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getByIdMaintenance()` */
  static readonly GetByIdMaintenancePath = '/gestionStation/maintenance/getByIdMaintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByIdMaintenance()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdMaintenance$Response(params: GetByIdMaintenance$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getByIdMaintenance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByIdMaintenance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIdMaintenance(params: GetByIdMaintenance$Params, context?: HttpContext): Observable<{
}> {
    return this.getByIdMaintenance$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllMaintenance()` */
  static readonly GetAllMaintenancePath = '/gestionStation/maintenance/getAllMaintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMaintenance()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMaintenance$Response(params?: GetAllMaintenance$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllMaintenance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMaintenance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMaintenance(params?: GetAllMaintenance$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllMaintenance$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteMaintenance()` */
  static readonly DeleteMaintenancePath = '/gestionStation/maintenance/deleteMaintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMaintenance()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMaintenance$Response(params: DeleteMaintenance$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteMaintenance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMaintenance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMaintenance(params: DeleteMaintenance$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteMaintenance$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }




  private apiUrl = `http://localhost:8020/gestionStation/maintenance/getAllMaintenance`;  // L'URL de ton API

  getMaintenances(page: number, size: number, sortBy: string, sortOrder: string): Observable<any> {
    const params = new HttpParams()
      .set('page', page.toString())
      .set('size', size.toString())
      .set('sortBy', sortBy)
      .set('sortOrder', sortOrder);

    return this.http.get<any>(this.apiUrl, { params });
  }




  private path = 'http://localhost:8020/gestionStation/maintenance';



  // Appel du CSV
  generateCsv() {
    return this.http.get(`${this.path}/generate-csv`, { responseType: 'text' });
  }

  // Appel du Excel
  downloadExcel(): Observable<Blob> {
    const url = `${this.path}/excel`;
    return this.http.get(url, { responseType: 'blob' });
  }
}

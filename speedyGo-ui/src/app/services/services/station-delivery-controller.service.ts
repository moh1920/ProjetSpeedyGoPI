/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createStation } from '../fn/station-delivery-controller/create-station';
import { CreateStation$Params } from '../fn/station-delivery-controller/create-station';
import { deleteStation1 } from '../fn/station-delivery-controller/delete-station-1';
import { DeleteStation1$Params } from '../fn/station-delivery-controller/delete-station-1';
import { getAllStations } from '../fn/station-delivery-controller/get-all-stations';
import { GetAllStations$Params } from '../fn/station-delivery-controller/get-all-stations';
import { getStationById } from '../fn/station-delivery-controller/get-station-by-id';
import { GetStationById$Params } from '../fn/station-delivery-controller/get-station-by-id';
import { Stationdelevery } from '../models/stationdelevery';
import { updateStation1 } from '../fn/station-delivery-controller/update-station-1';
import { UpdateStation1$Params } from '../fn/station-delivery-controller/update-station-1';

@Injectable({ providedIn: 'root' })
export class StationDeliveryControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateStation1()` */
  static readonly UpdateStation1Path = '/api/station-deliveries/updateStation/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStation1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStation1$Response(params: UpdateStation1$Params, context?: HttpContext): Observable<StrictHttpResponse<Stationdelevery>> {
    return updateStation1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStation1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStation(params: UpdateStation1$Params, context?: HttpContext): Observable<Stationdelevery> {
    return this.updateStation1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Stationdelevery>): Stationdelevery => r.body)
    );
  }

  /** Path part for operation `createStation()` */
  static readonly CreateStationPath = '/api/station-deliveries/createStation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createStation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStation$Response(params: CreateStation$Params, context?: HttpContext): Observable<StrictHttpResponse<Stationdelevery>> {
    return createStation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createStation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStation(params: CreateStation$Params, context?: HttpContext): Observable<Stationdelevery> {
    return this.createStation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Stationdelevery>): Stationdelevery => r.body)
    );
  }

  /** Path part for operation `getStationById()` */
  static readonly GetStationByIdPath = '/api/station-deliveries/getStationById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStationById$Response(params: GetStationById$Params, context?: HttpContext): Observable<StrictHttpResponse<Stationdelevery>> {
    return getStationById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStationById(params: GetStationById$Params, context?: HttpContext): Observable<Stationdelevery> {
    return this.getStationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Stationdelevery>): Stationdelevery => r.body)
    );
  }

  /** Path part for operation `getAllStations()` */
  static readonly GetAllStationsPath = '/api/station-deliveries/getAllStations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllStations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStations$Response(params?: GetAllStations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Stationdelevery>>> {
    return getAllStations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllStations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStations(params?: GetAllStations$Params, context?: HttpContext): Observable<Array<Stationdelevery>> {
    return this.getAllStations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Stationdelevery>>): Array<Stationdelevery> => r.body)
    );
  }

  /** Path part for operation `deleteStation1()` */
  static readonly DeleteStation1Path = '/api/station-deliveries/deleteStation/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStation1()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStation1$Response(params: DeleteStation1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteStation1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStation1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStation(params: DeleteStation1$Params, context?: HttpContext): Observable<void> {
    return this.deleteStation1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
